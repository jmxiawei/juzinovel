package xcvf.top.readercore.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xcvf.top.readercore.bean.Chapter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER".
*/
public class ChapterDao extends AbstractDao<Chapter, Void> {

    public static final String TABLENAME = "CHAPTER";

    /**
     * Properties of entity Chapter.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Chapter_name = new Property(0, String.class, "chapter_name", false, "CHAPTER_NAME");
        public final static Property Extern_bookid = new Property(1, String.class, "extern_bookid", false, "EXTERN_BOOKID");
        public final static Property Self_page = new Property(2, String.class, "self_page", false, "SELF_PAGE");
        public final static Property Is_fetch = new Property(3, int.class, "is_fetch", false, "IS_FETCH");
        public final static Property Engine_domain = new Property(4, String.class, "engine_domain", false, "ENGINE_DOMAIN");
        public final static Property Extra_info = new Property(5, String.class, "extra_info", false, "EXTRA_INFO");
        public final static Property Fetch_code = new Property(6, String.class, "fetch_code", false, "FETCH_CODE");
        public final static Property Chapterid = new Property(7, int.class, "chapterid", false, "CHAPTERID");
    }


    public ChapterDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER\" (" + //
                "\"CHAPTER_NAME\" TEXT," + // 0: chapter_name
                "\"EXTERN_BOOKID\" TEXT," + // 1: extern_bookid
                "\"SELF_PAGE\" TEXT," + // 2: self_page
                "\"IS_FETCH\" INTEGER NOT NULL ," + // 3: is_fetch
                "\"ENGINE_DOMAIN\" TEXT," + // 4: engine_domain
                "\"EXTRA_INFO\" TEXT," + // 5: extra_info
                "\"FETCH_CODE\" TEXT," + // 6: fetch_code
                "\"CHAPTERID\" INTEGER NOT NULL UNIQUE );"); // 7: chapterid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Chapter entity) {
        stmt.clearBindings();
 
        String chapter_name = entity.getChapter_name();
        if (chapter_name != null) {
            stmt.bindString(1, chapter_name);
        }
 
        String extern_bookid = entity.getExtern_bookid();
        if (extern_bookid != null) {
            stmt.bindString(2, extern_bookid);
        }
 
        String self_page = entity.getSelf_page();
        if (self_page != null) {
            stmt.bindString(3, self_page);
        }
        stmt.bindLong(4, entity.getIs_fetch());
 
        String engine_domain = entity.getEngine_domain();
        if (engine_domain != null) {
            stmt.bindString(5, engine_domain);
        }
 
        String extra_info = entity.getExtra_info();
        if (extra_info != null) {
            stmt.bindString(6, extra_info);
        }
 
        String fetch_code = entity.getFetch_code();
        if (fetch_code != null) {
            stmt.bindString(7, fetch_code);
        }
        stmt.bindLong(8, entity.getChapterid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Chapter entity) {
        stmt.clearBindings();
 
        String chapter_name = entity.getChapter_name();
        if (chapter_name != null) {
            stmt.bindString(1, chapter_name);
        }
 
        String extern_bookid = entity.getExtern_bookid();
        if (extern_bookid != null) {
            stmt.bindString(2, extern_bookid);
        }
 
        String self_page = entity.getSelf_page();
        if (self_page != null) {
            stmt.bindString(3, self_page);
        }
        stmt.bindLong(4, entity.getIs_fetch());
 
        String engine_domain = entity.getEngine_domain();
        if (engine_domain != null) {
            stmt.bindString(5, engine_domain);
        }
 
        String extra_info = entity.getExtra_info();
        if (extra_info != null) {
            stmt.bindString(6, extra_info);
        }
 
        String fetch_code = entity.getFetch_code();
        if (fetch_code != null) {
            stmt.bindString(7, fetch_code);
        }
        stmt.bindLong(8, entity.getChapterid());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Chapter readEntity(Cursor cursor, int offset) {
        Chapter entity = new Chapter( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // chapter_name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // extern_bookid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // self_page
            cursor.getInt(offset + 3), // is_fetch
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // engine_domain
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // extra_info
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fetch_code
            cursor.getInt(offset + 7) // chapterid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Chapter entity, int offset) {
        entity.setChapter_name(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setExtern_bookid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSelf_page(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIs_fetch(cursor.getInt(offset + 3));
        entity.setEngine_domain(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExtra_info(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFetch_code(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChapterid(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Chapter entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Chapter entity) {
        return null;
    }

    @Override
    public boolean hasKey(Chapter entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
