package xcvf.top.readercore.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xcvf.top.readercore.bean.BookMark;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_MARK".
*/
public class BookMarkDao extends AbstractDao<BookMark, Void> {

    public static final String TABLENAME = "BOOK_MARK";

    /**
     * Properties of entity BookMark.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Time_stamp = new Property(0, long.class, "time_stamp", false, "TIME_STAMP");
        public final static Property Unique_key = new Property(1, String.class, "unique_key", false, "UNIQUE_KEY");
        public final static Property Userid = new Property(2, int.class, "userid", false, "USERID");
        public final static Property Bookid = new Property(3, int.class, "bookid", false, "BOOKID");
        public final static Property Extern_bookid = new Property(4, String.class, "extern_bookid", false, "EXTERN_BOOKID");
        public final static Property Chapterid = new Property(5, String.class, "chapterid", false, "CHAPTERID");
        public final static Property Page = new Property(6, int.class, "page", false, "PAGE");
    }


    public BookMarkDao(DaoConfig config) {
        super(config);
    }
    
    public BookMarkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_MARK\" (" + //
                "\"TIME_STAMP\" INTEGER NOT NULL ," + // 0: time_stamp
                "\"UNIQUE_KEY\" TEXT UNIQUE ," + // 1: unique_key
                "\"USERID\" INTEGER NOT NULL ," + // 2: userid
                "\"BOOKID\" INTEGER NOT NULL ," + // 3: bookid
                "\"EXTERN_BOOKID\" TEXT," + // 4: extern_bookid
                "\"CHAPTERID\" TEXT," + // 5: chapterid
                "\"PAGE\" INTEGER NOT NULL );"); // 6: page
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_MARK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookMark entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTime_stamp());
 
        String unique_key = entity.getUnique_key();
        if (unique_key != null) {
            stmt.bindString(2, unique_key);
        }
        stmt.bindLong(3, entity.getUserid());
        stmt.bindLong(4, entity.getBookid());
 
        String extern_bookid = entity.getExtern_bookid();
        if (extern_bookid != null) {
            stmt.bindString(5, extern_bookid);
        }
 
        String chapterid = entity.getChapterid();
        if (chapterid != null) {
            stmt.bindString(6, chapterid);
        }
        stmt.bindLong(7, entity.getPage());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookMark entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTime_stamp());
 
        String unique_key = entity.getUnique_key();
        if (unique_key != null) {
            stmt.bindString(2, unique_key);
        }
        stmt.bindLong(3, entity.getUserid());
        stmt.bindLong(4, entity.getBookid());
 
        String extern_bookid = entity.getExtern_bookid();
        if (extern_bookid != null) {
            stmt.bindString(5, extern_bookid);
        }
 
        String chapterid = entity.getChapterid();
        if (chapterid != null) {
            stmt.bindString(6, chapterid);
        }
        stmt.bindLong(7, entity.getPage());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BookMark readEntity(Cursor cursor, int offset) {
        BookMark entity = new BookMark( //
            cursor.getLong(offset + 0), // time_stamp
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // unique_key
            cursor.getInt(offset + 2), // userid
            cursor.getInt(offset + 3), // bookid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // extern_bookid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // chapterid
            cursor.getInt(offset + 6) // page
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookMark entity, int offset) {
        entity.setTime_stamp(cursor.getLong(offset + 0));
        entity.setUnique_key(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserid(cursor.getInt(offset + 2));
        entity.setBookid(cursor.getInt(offset + 3));
        entity.setExtern_bookid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setChapterid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPage(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BookMark entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BookMark entity) {
        return null;
    }

    @Override
    public boolean hasKey(BookMark entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
