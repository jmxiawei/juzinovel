import java.text.DateFormat

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
        maven { url 'https://github.com/uPhyca/stetho-realm/raw/master/maven-repo' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://jitpack.io" }
        maven { url "http://maven.bughd.com/public" }
    }

}


def getVersionCode() {
    def versionFile = file('buildsystem/version.properties')
    if (versionFile.exists()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['build.versionCode'].toInteger()
        FileOutputStream fileOutputStream = new FileOutputStream(versionFile)
        versionProps.setProperty("build.versionCode",String.valueOf(versionCode+1))
        versionProps.store(fileOutputStream,versionProps.toString())
        println('Current version code is ' + versionCode.toString())
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}
String getVersionName(){
    def versionFile = file('buildsystem/version.properties')
    if (versionFile.exists()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        DateFormat format = DateFormat.getDateTimeInstance()
        def versionNameMain = versionProps['build.versionNameMain'].toInteger()
        def versionNameSecond = versionProps['build.versionNameSecond'].toInteger()
        def versionNameDate = format.format(new Date()).replace(" ","").replace("-","").replace(":","")
        FileOutputStream fileOutputStream = new FileOutputStream(versionFile)
        versionNameSecond++
        versionProps.setProperty("build.versionNameSecond",String.valueOf(versionNameSecond))
        versionProps.setProperty("build.versionNameDate",versionNameDate)
        versionProps.store(fileOutputStream,versionProps.toString())
        return versionNameMain+"."+versionNameSecond+"."+versionNameDate
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}


ext {
//    compileSdkVersion = 26
//    buildToolsVersion = "26.0.1"
//    minSdkVersion = 16
//    targetSdkVersion = 26
//    support = "26.0.0-alpha1"
    compileSdkVersion = 28
    buildToolsVersion = "28.0.3"
    minSdkVersion = 21
    targetSdkVersion = 28
    support = "26.0.0-alpha1"
    appcompatSupport = "26.0.0-alpha1"
//  versionCode = 195
//  versionName = '3.6.1'
    versionCode = getVersionCode()
    versionName = getVersionName()

    // support com.android.support:design:26.0.0-alpha1
    supportV4 = "com.android.support:support-v4:${support}"
    supportDesign = "com.android.support:design:${support}"
    supportpreference = "com.android.support:preference-v7:${support}"
    supportannotations = "com.android.support:support-annotations:${support}"
    supportAppcompat = "com.android.support:appcompat-v7:${appcompatSupport}"
    supportcardview = "com.android.support:cardview-v7:${support}"
    supportrecyclerview = "com.android.support:recyclerview-v7:${support}"

    //Annotationsqwer
    butterknifeVersion = "8.5.1"
    butterknife = "com.jakewharton:butterknife:${butterknifeVersion}"
    butterknifeAnnotationProcessor = "com.jakewharton:butterknife-compiler:${butterknifeVersion}"


    daggerVersion = "2.11"
    dagger = "com.google.dagger:dagger:${daggerVersion}"
    daggerannotationProcessor = "com.google.dagger:dagger-compiler:${daggerVersion}"

    //image
    frescoVersion = '1.2.0'
    fresco = "com.facebook.fresco:fresco:${frescoVersion}"
    animatedGif = "com.facebook.fresco:animated-gif:${frescoVersion}"
    imagepipelineOkhttp3 = "com.facebook.fresco:imagepipeline-okhttp3:${frescoVersion}"

    glide = "com.github.bumptech.glide:glide:3.7.0"
    // orm
    sugar = "com.github.satyan:sugar:1.5"
    // luban
    Luban = 'top.zibin:Luban:1.1.3'
    //debug
    leakcanary = "com.squareup.leakcanary:leakcanary-android:1.5"
    leakcanaryNoOp = "com.squareup.leakcanary:leakcanary-android-no-op:1.5"

    // http
    okhttp = "com.squareup.okhttp3:okhttp:3.6.0"
    retrofit = "com.squareup.retrofit2:retrofit:2.2.0"
    converterGson = "com.squareup.retrofit2:converter-gson:2.2.0"

    bolts = "com.parse.bolts:bolts-android:1.4.0"
    // debug data
    stethoOkhttp3 = "com.facebook.stetho:stetho-okhttp3:1.4.2"
    stetho = "com.facebook.stetho:stetho:1.4.2"

    // 6.0权限
    easypermissions = "pub.devrel:easypermissions:0.1.9"

    junitVersion = "junit:junit:4.12"

    // hotfix
    aceso = "com.mogujie.aceso:aceso-android-lib:0.0.1"
    robust = "com.meituan.robust:robust:0.3.8"

    avatarImageView = 'cn.carbs.android:AvatarImageView:1.0.4'

    //mvp
    // MVP + ViewState + LCE Views
    mosby3Lce = 'com.hannesdorfmann.mosby3:mvp-lce:3.1.0'
    // Queuing Presenter for MVP
    mosby3queuing = 'com.hannesdorfmann.mosby3:mvp-queuing-presenter:3.1.0'


    utilcode = 'com.blankj:utilcode:1.14.0'

    rxandroid =  'io.reactivex.rxjava2:rxandroid:2.0.2'
// Because RxAndroid releases are few and far between, it is recommended you also
// explicitly depend on RxJava's latest version for bug fixes and new features.
// (see https://github.com/ReactiveX/RxJava/releases for latest 2.x.x version)
    rxjava =  'io.reactivex.rxjava2:rxjava:2.1.16'

    wechat = 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:5.1.6'
    //greendao
    greendao = 'org.greenrobot:greendao:3.2.2' // add library

}